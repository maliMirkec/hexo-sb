/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */ }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none; }

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none; }

html {
  font-size: 20px; }
  @media screen and (min-width: 480px) {
    html {
      font-size: calc(20px + 2 * (100vw - 480px) / 720); } }
  @media screen and (min-width: 1200px) {
    html {
      font-size: 22px; } }

body {
  font-size: 1rem;
  line-height: 1.6; }

h1 {
  font-size: 1.77689rem;
  font-weight: 700;
  word-break: break-word;
  text-transform: uppercase;
  color: #6c6c6c;
  letter-spacing: calc(0.15em / 1); }
  @media (min-width: 48em) {
    h1 {
      font-size: 2.36859rem; } }

h2 {
  font-size: 1.333rem;
  font-weight: 700;
  word-break: break-word;
  text-transform: uppercase;
  color: #6c6c6c;
  letter-spacing: calc(0.15em / 2); }
  @media (min-width: 48em) {
    h2 {
      font-size: 1.77689rem; } }

h3 {
  font-size: 1rem;
  font-weight: 700;
  word-break: break-word;
  text-transform: uppercase;
  color: #6c6c6c;
  letter-spacing: calc(0.15em / 3); }
  @media (min-width: 48em) {
    h3 {
      font-size: 1.333rem; } }

h4 {
  font-size: 0.75019rem;
  font-weight: 700;
  word-break: break-word;
  text-transform: uppercase;
  color: #6c6c6c;
  letter-spacing: calc(0.15em / 4); }
  @media (min-width: 48em) {
    h4 {
      font-size: 1rem; } }

h1 a,
h2 a,
h3 a,
h4 a,
h5 a,
h6 a {
  color: inherit;
  text-decoration: none;
  text-transform: uppercase; }

p {
  margin-top: 1.333rem; }

code {
  line-height: 1; }

::-moz-selection {
  background-color: #f36595;
  text-shadow: 0 1px 0 #e01258;
  color: #fff; }

::selection {
  background-color: #f36595;
  text-shadow: 0 1px 0 #e01258;
  color: #fff; }

body {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  font-size: 16px;
  line-height: 1.5;
  color: #1f1f1f;
  overflow-x: hidden; }

img {
  max-width: 100%;
  width: 100%;
  margin: 0 auto; }

.main {
  flex: 1 1 auto;
  margin: 50px auto;
  width: calc(100% - 50px);
  position: relative;
  display: grid;
  grid-template-areas: "info" "title" "content";
  grid-template-columns: 100%;
  grid-gap: 25px;
  font-size: 1rem; }
  .main a {
    color: inherit;
    text-decoration: none; }
    .main a:hover, .main a:focus, .main a:active {
      text-decoration: underline; }
  .main > div:first-of-type {
    grid-area: content; }
  @media (min-width: 30em) {
    .main {
      padding: 0 0 50px;
      max-width: 1200px;
      grid-template-areas: "title" "content" "meta";
      grid-gap: 50px; } }
  @media (min-width: 75em) {
    .main {
      max-width: 1200px; } }

.main--sidebar {
  grid-template-areas: "info" "title" "content" "sidebar"; }
  @media (min-width: 30em) {
    .main--sidebar {
      grid-template-areas: "title" "content" "sidebar"; } }
  @media (min-width: 48em) {
    .main--sidebar {
      grid-template-areas: "title title" "content sidebar";
      grid-template-columns: 1fr 33vw; } }
  @media (min-width: 75em) {
    .main--sidebar {
      grid-template-columns: 1fr 25vw;
      grid-row-gap: 50px; } }

.main--category {
  grid-template-areas: "info" "content" "meta"; }

.main--post {
  max-width: 960px; }

.main--archive,
.main--tag {
  grid-template-areas: "info" "title" "content" "meta"; }

.header {
  background-color: #12e09f;
  color: #fff; }

.nav__list {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  font-size: 16px;
  line-height: 30px;
  margin: 0;
  padding: 10px 5px;
  list-style: none; }
  @media (min-width: 48em) {
    .nav__list {
      padding: 0;
      justify-content: flex-start; } }

.nav__item {
  text-align: center; }
  @media (min-width: 48em) {
    .nav__item:last-of-type {
      margin-left: auto; } }

.nav__link {
  display: block;
  color: inherit;
  padding: 5px 10px;
  text-transform: uppercase;
  text-decoration: none;
  font-weight: 300;
  letter-spacing: 0.05em;
  background-size: 10px 10px;
  background-repeat: no-repeat;
  background-position: center bottom; }
  .nav__list--home .nav__item:first-child .nav__link {
    background-image: url(/gfx/svg/logo-header.svg); }
  .nav__list--blog .nav__item:nth-child(2) .nav__link {
    background-image: url(/gfx/svg/logo-header.svg); }
  .nav__list--portfolio .nav__item:nth-child(3) .nav__link {
    background-image: url(/gfx/svg/logo-header.svg); }
  .nav__list--about-me .nav__item:nth-child(4) .nav__link {
    background-image: url(/gfx/svg/logo-header.svg); }
  .nav__link:hover, .nav__link:focus, .nav__link:active {
    background-color: #1fedac; }
  @media (min-width: 48em) {
    .nav__link {
      background-size: 20px 20px;
      padding: 17.5px 25px; } }
  @media (min-width: 75em) {
    .nav__link {
      padding: 35px 50px;
      background-size: 30px 30px;
      background-position: center bottom; } }

.footer {
  background-color: #e01258;
  color: #fff;
  font-size: 16px;
  line-height: 30px;
  display: flex;
  flex-direction: column;
  align-items: center; }
  @media (min-width: 48em) {
    .footer {
      flex-direction: row; } }

.subnav__list {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin: 0;
  padding: 10px 5px;
  list-style: none; }
  @media (min-width: 48em) {
    .subnav__list {
      padding: 0;
      justify-content: flex-start; } }

.subnav__link {
  display: block;
  color: inherit;
  padding: 5px 10px;
  text-transform: uppercase;
  text-decoration: none;
  font-weight: 300;
  letter-spacing: 0.05em; }
  .subnav__link img {
    display: block;
    max-width: 30px; }
  .subnav__link:hover, .subnav__link:focus, .subnav__link:active {
    background-color: #ed1f65; }
  @media (min-width: 48em) {
    .subnav__link {
      padding: 17.5px 25px; } }
  @media (min-width: 75em) {
    .subnav__link {
      padding: 35px 25px; } }

.copy {
  margin-top: 0;
  margin-bottom: 0;
  padding: 5px 10px;
  font-weight: 500;
  line-height: 30px;
  letter-spacing: 0.05em; }
  @media (min-width: 48em) {
    .copy {
      padding: 17.5px 25px;
      margin-left: auto; } }
  @media (min-width: 75em) {
    .copy {
      padding: 35px 25px; } }

.info {
  color: #fff;
  max-width: 100%;
  display: flex;
  justify-content: flex-end;
  font-size: 0.75019rem;
  order: 0;
  grid-area: info; }
  .info p {
    margin-top: 0; }
  .info a {
    color: inherit; }
  @media (min-width: 30em) {
    .info {
      position: absolute;
      top: 50px;
      right: 0;
      grid-area: none; } }

.info__icon {
  background-color: #e01258;
  font-family: 'Playfair Display', serif;
  font-weight: 500;
  width: 24px;
  height: 24px;
  box-shadow: 1px 1px 4px -1px #1f1f1f;
  display: none;
  align-items: center;
  justify-content: center;
  text-decoration: none;
  position: absolute;
  right: 0;
  top: 0;
  -webkit-transform-origin: right top;
          transform-origin: right top;
  animation: highlight 1s linear alternate-reverse infinite; }
  .info:hover .info__icon {
    display: none; }
  @media (min-width: 30em) {
    .info__icon {
      display: flex; } }

.info__popup {
  color: #e01258;
  display: flex;
  flex-direction: column;
  margin-left: auto; }
  @media (min-width: 30em) {
    .info__popup {
      padding: 15px;
      background-color: #e01258;
      color: #fff;
      box-shadow: 0 2px 3px -1px #1f1f1f;
      display: none;
      width: 380px; }
      .info:hover .info__popup {
        display: flex; } }

.info__list {
  list-style: none;
  margin: 0;
  padding: 0;
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr;
  grid-gap: 10px; }

.info__link {
  display: block;
  text-decoration: none;
  padding: 5px;
  text-align: center;
  border: 1px solid #e01258; }
  @media (min-width: 30em) {
    .info__link {
      border: 1px solid #fff; } }
  .info__link:hover, .info__link:focus, .info__link:active {
    background-color: #ed1f65;
    color: #fff; }

@-webkit-keyframes highlight {
  to {
    -webkit-transform: scale(1.15);
            transform: scale(1.15);
    opacity: 0.8; } }

@keyframes highlight {
  to {
    -webkit-transform: scale(1.15);
            transform: scale(1.15);
    opacity: 0.8; } }

.sidebar {
  grid-area: sidebar; }

@media (min-width: 48em) {
  .sidebar__inner {
    position: relative;
    padding-top: 10px;
    padding-bottom: 60px;
    padding-left: 50px; }
    .sidebar__inner:before {
      content: "";
      position: absolute;
      top: 0;
      right: calc((100vw - 100%) / -2);
      bottom: 0;
      left: 0;
      background-color: #f5f5f5;
      border-left: 1px solid #12e09f;
      z-index: -1; } }

.sidebar__title {
  position: relative; }
  .sidebar__title:after {
    content: "";
    position: absolute;
    top: 100%;
    left: 0;
    width: 15%;
    max-width: 100px;
    height: 10px;
    background-color: #f695b6; }

.list {
  margin: 0;
  padding: 0;
  color: #1f1f1f;
  font-size: 1rem; }
  .list p {
    margin: 0; }
  .list h4,
  .list h5 {
    letter-spacing: 0.025em;
    text-transform: none;
    color: #ef3675; }
  .list h4 {
    color: #f14e85;
    font-size: 1.77689rem;
    margin-top: 0;
    margin-bottom: 0.5em; }
  .list h5 {
    font-family: "Barlow", sans-serif;
    font-size: 1.333rem;
    font-weight: 400;
    margin-top: .5em;
    margin-bottom: 0; }
  .list a {
    text-decoration: none; }
  .list:not([class*="list--"]) a {
    color: #e01258; }
  .list img[src*=".svg"] {
    max-width: 50px; }

.list:not(.list--bullets) {
  list-style: none; }

.list--alpha {
  display: grid;
  grid-gap: 20px;
  margin-top: 20px; }
  .list--alpha img {
    -webkit-filter: drop-shadow(0 0 10px #9f9f9f);
            filter: drop-shadow(0 0 10px #9f9f9f); }
  .list--alpha a {
    display: block; }
    .list--alpha a:hover, .list--alpha a:focus, .list--alpha a:active {
      text-decoration: none; }
      .list--alpha a:hover img, .list--alpha a:focus img, .list--alpha a:active img {
        -webkit-filter: drop-shadow(0 0 10px #12e09f);
                filter: drop-shadow(0 0 10px #12e09f); }
      .list--alpha a:hover span, .list--alpha a:focus span, .list--alpha a:active span {
        text-decoration: underline; }
  .list--alpha p {
    margin-top: 1em;
    color: #1f1f1f; }
    .list--alpha p:last-child {
      margin-bottom: 0; }
  .list--alpha h5 {
    color: #f36595;
    text-align: center; }
  .list--alpha span {
    color: #e01258; }
  @media (min-width: 48em) {
    .list--alpha {
      grid-template-columns: 1fr 1fr;
      grid-template-rows: 1fr 1fr;
      grid-gap: 100px;
      margin-top: 100px; } }

.list--beta {
  color: #0fbf88; }

.list--gamma {
  color: #e01258; }

.list--delta {
  display: flex;
  flex-wrap: wrap; }

.list--epsilon {
  justify-content: center; }

.list__item {
  margin-bottom: 0.25em; }

.list__item--alpha {
  font-size: 0.75019rem; }

.list__item--beta {
  margin-right: auto; }

.list__item--gamma {
  margin-left: .75em; }
  .list__br + .list__item--gamma {
    margin-left: 0; }
  @media (min-width: 48em) {
    .list__item--gamma {
      margin-left: auto; } }

.list__item--delta {
  margin-left: .5em; }
  @media (min-width: 30em) {
    .list__item--delta {
      margin-left: 2em; } }

.list__item--epsilon {
  margin-right: 0.5em;
  margin-bottom: 0.5em; }

.list__link--logo {
  display: block;
  margin-top: 0.5em; }

.list__link.list__link--current {
  color: #e01258; }

.list__br {
  display: block;
  flex: 1 1 100%;
  width: 100%;
  height: 10px; }
  @media (min-width: 48em) {
    .list__br {
      display: inline-block;
      flex: 0 0 auto;
      width: auto;
      margin-left: auto; } }

.home {
  display: grid;
  grid-gap: 50px;
  grid-template-areas: "alpha" "beta" "epsilon" "gamma" "delta"; }
  .home h1,
  .home h2 {
    position: relative; }
    .home h1:after,
    .home h2:after {
      content: "";
      position: absolute;
      top: 100%;
      left: 0;
      width: 15%;
      max-width: 100px;
      height: 10px;
      background-color: #65f3c6; }
  .home h1 {
    font-size: 1.77689rem; }
    @media (min-width: 48em) {
      .home h1 {
        font-size: 3.15733rem; } }
  .home h2 {
    font-size: 1.333rem; }
    @media (min-width: 48em) {
      .home h2 {
        font-size: 2.36859rem; } }
  @media (min-width: 30em) {
    .home {
      grid-template-areas: "alpha alpha" "beta beta" "delta epsilon" "gamma gamma"; } }
  @media (min-width: 75em) {
    .home {
      grid-template-columns: repeat(3, minmax(30%, 1fr));
      grid-template-areas: "alpha alpha alpha" "beta beta beta" "delta epsilon x" "gamma gamma gamma"; } }

.home__box--alpha {
  grid-area: alpha; }

.home__box--beta {
  grid-area: beta; }

.home__box--gamma {
  grid-area: gamma; }

.home__box--delta {
  grid-area: delta; }

.home__box--epsiolon {
  grid-area: epsiolon; }

.articles {
  display: grid;
  grid-template-columns: 1fr;
  grid-gap: 50px;
  width: 100%; }
  @media (min-width: 48em) {
    .articles {
      grid-template-columns: 1fr 1fr; } }
  @media (min-width: 75em) {
    .articles {
      grid-template-columns: 1fr 1fr 1fr; } }

.articles .article {
  position: relative;
  max-width: 640px;
  margin: 0 auto; }
  .articles .article:before {
    content: "";
    position: absolute;
    top: -10px;
    right: -25px;
    bottom: -10px;
    left: -25px;
    background-image: radial-gradient(circle closest-side at center, #fff, #f5f5f5);
    opacity: .1;
    z-index: -1; }
  .articles .article:hover:before, .articles .article:focus:before, .articles .article:active:before {
    opacity: 1; }

.article li a,
.article p a {
  color: #e01258; }

.article blockquote {
  border-left: 1px solid #12e09f;
  margin: 2em 0;
  padding: 5px 0 10px 20px;
  position: relative; }
  .article blockquote h3 {
    text-transform: none; }
    .article blockquote h3:after {
      content: none; }
  .article blockquote:before {
    content: "";
    position: absolute;
    top: 0;
    right: calc((100vw - 100%) / -2);
    bottom: 0;
    left: calc((100vw - 100%) / -2);
    background-color: #f5f5f5;
    z-index: -1; }
  @media (min-width: 48em) {
    .main--sidebar .article blockquote:before {
      right: 0; } }
  @media (min-width: 48em) {
    .article blockquote {
      padding: 20px 60px 1.414rem; } }

.article__title--alpha {
  font-size: 1.333rem;
  text-shadow: 0 1px 0 #fff; }
  .article__title--alpha a {
    color: #e01258;
    display: block; }
    .article__title--alpha a:hover, .article__title--alpha a:focus, .article__title--alpha a:active {
      color: #12e09f;
      text-decoration: none; }

.article__title--beta {
  grid-area: title;
  margin-bottom: 0; }
  @media (max-width: 47.99em) {
    .article__title--beta {
      font-size: 1.333rem; } }
  @media (min-width: 48em) {
    .article__title--beta {
      margin-right: calc((100vw - 100%) / -2);
      margin-left: calc((100vw - 100%) / -2);
      padding-left: 1em;
      padding-right: 1em;
      text-align: center; } }

.article__title--gamma {
  font-size: 1.77689rem;
  margin-bottom: 0;
  grid-area: title; }
  @media (min-width: 48em) {
    .article__title--gamma {
      font-size: 3.15733rem; } }

.article__thumb {
  margin-right: calc((100vw - 100%) / -2);
  margin-left: calc((100vw - 100%) / -2); }
  .article__thumb img {
    display: block; }
  @media (min-width: 30em) {
    .article__thumb {
      margin-right: 0;
      margin-left: 0; } }

.details {
  margin-top: 0;
  margin-bottom: 0;
  padding: 1em 0; }
  .main--post .details {
    margin-bottom: 2em;
    position: relative; }
    .main--post .details:before {
      content: "";
      position: absolute;
      top: 0;
      right: calc((100vw - 100%) / -2);
      bottom: 0;
      left: calc((100vw - 100%) / -2);
      background-color: #f5f5f5;
      z-index: -1; }
    @media (min-width: 30em) {
      .main--post .details {
        margin-top: 1em;
        max-width: 720px;
        margin-left: auto;
        margin-right: auto; } }

.metadata {
  grid-area: meta;
  margin: 2em 0 4em;
  display: grid;
  grid-template-columns: 1fr; }
  .metadata h4,
  .metadata p,
  .metadata li {
    line-height: 30px; }
  .metadata h4,
  .metadata p {
    margin-top: 1rem;
    margin-bottom: 1rem; }
  .metadata h4 {
    color: #1f1f1f; }
  .metadata li {
    margin-bottom: 0; }
  .metadata li,
  .metadata p {
    font-size: 0.825rem; }
  @media (min-width: 48em) {
    .metadata {
      grid-template-columns: 1fr 1fr;
      grid-gap: 25px; } }

.content h2,
.content h3,
.content h4 {
  position: relative; }
  .content h2:after,
  .content h3:after,
  .content h4:after {
    content: "";
    position: absolute;
    top: 100%;
    left: 0;
    width: 15%;
    max-width: 100px;
    height: 10px;
    background-color: #65f3c6; }

.content > *:first-child {
  margin-top: 0; }

.main--post .content {
  max-width: 720px;
  margin: 0 auto; }

.main--post .comments {
  max-width: 720px;
  margin: 0 auto; }

.highlight {
  margin: 2em 0;
  max-width: 100%;
  overflow-x: auto;
  padding: 0 1em;
  background-color: #f5f5f5; }
  .highlight table {
    color: #e01258;
    font-size: 0.875rem;
    line-height: 1.8; }
  .highlight .gutter {
    padding-right: 1em;
    color: #9f9f9f; }

.sig {
  align-items: baseline;
  background-image: linear-gradient(to right, rgba(30, 217, 217, 0.15), rgba(30, 186, 218, 0.15));
  color: #383738;
  display: flex;
  justify-content: center;
  line-height: 1;
  padding: 0 calc(0.45455 * 1rem) calc(0.27273 * 1rem); }
  .sig p {
    font-size: 0.75019rem;
    margin: 0; }

.sig__link {
  align-items: baseline;
  display: inline-flex;
  text-decoration: none;
  transition: all 0.225s cubic-bezier(0.3, 0.6, 0.5, 0.81); }
  .sig__link svg {
    height: calc(0.90909 * 1rem);
    margin-right: calc(0.09091 * 1rem);
    -webkit-transform: translateY(calc(0.18182 * 1rem));
            transform: translateY(calc(0.18182 * 1rem));
    -webkit-transform-origin: center;
            transform-origin: center;
    transition: all 0.225s cubic-bezier(0.3, 0.6, 0.5, 0.81) forwards;
    width: calc(0.90909 * 1rem); }

/*# sourceMappingURL=data:application/json;base64, */
